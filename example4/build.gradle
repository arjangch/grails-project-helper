buildscript {
    repositories {
        mavenCentral()
        maven { url "https://repo.grails.org/grails/restricted" }
        maven {
            url = 'https://repository.apache.org/content/groups/snapshots'
            content {
                includeVersionByRegex('org[.]apache[.](grails|groovy).*', '.*', '.*-SNAPSHOT')
            }
        }
    }
    dependencies {
        classpath platform("org.apache.grails:grails-bom:$grailsVersion")
        classpath "org.apache.grails:grails-gradle-plugins"
        classpath "org.apache.grails:grails-data-hibernate5"
        classpath "cloud.wondrify:asset-pipeline-gradle"
    }
}

version "0.1"
group "example4"

apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "war"
apply plugin: "org.apache.grails.gradle.grails-web"
apply plugin: "cloud.wondrify.asset-pipeline"
apply plugin: "org.apache.grails.gradle.grails-gsp"

repositories {
    mavenCentral()
    maven { url "https://repo.grails.org/grails/restricted" }
    maven {
        url = 'https://repository.apache.org/content/groups/snapshots'
        content {
            includeVersionByRegex('org[.]apache[.](grails|groovy).*', '.*', '.*-SNAPSHOT')
        }
    }
}

dependencies {
    console "org.apache.grails:grails-console"
    developmentOnly "org.springframework.boot:spring-boot-devtools"
    implementation platform("org.apache.grails:grails-bom:$grailsVersion")
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-autoconfigure"
    implementation "org.springframework.boot:spring-boot-starter"
    implementation "org.apache.grails:grails-core"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-tomcat"
    implementation "org.apache.grails:grails-web-boot"
    implementation "org.apache.grails:grails-logging"
    implementation "org.apache.grails:grails-rest-transforms"
    implementation "org.apache.grails:grails-databinding"
    implementation "org.apache.grails:grails-services"
    implementation "org.apache.grails:grails-url-mappings"
    implementation "org.apache.grails:grails-layout"
    implementation "org.apache.grails:grails-interceptors"
    implementation "org.apache.grails:grails-scaffolding"
    implementation "org.apache.grails:grails-data-hibernate5"
    implementation "org.apache.grails:grails-gsp"
    integrationTestImplementation testFixtures("org.apache.grails:grails-geb")
    profile "org.apache.grails.profiles:web"
    runtimeOnly "org.fusesource.jansi:jansi"
    runtimeOnly "com.h2database:h2"
    runtimeOnly "com.zaxxer:HikariCP"
    runtimeOnly "cloud.wondrify:asset-pipeline-grails"
    testAndDevelopmentOnly "org.webjars.npm:bootstrap"
    testAndDevelopmentOnly "org.webjars.npm:bootstrap-icons"
    testAndDevelopmentOnly "org.webjars.npm:jquery"
    testImplementation "org.apache.grails:grails-testing-support-datamapping"
    testImplementation "org.spockframework:spock-core"
    testImplementation "org.apache.grails:grails-testing-support-web"

    // https://mvnrepository.com/artifact/com.github.anonymousmister.gradle.plugin/1password-plugin
//    implementation("com.github.anonymousmister.gradle.plugin:1password-plugin:0.0.8")

    // https://mvnrepository.com/artifact/tech.toolpack.gradle/1password-plugin
//    implementation("tech.toolpack.gradle:1password-plugin:1.0.0")
}

compileJava.options.release = 21

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}


assets {
    excludes = [
            'webjars/jquery/**',
            'webjars/bootstrap/**',
            'webjars/bootstrap-icons/**'
    ]
    includes = [
            'webjars/jquery/*/dist/jquery.js',
            'webjars/bootstrap/*/dist/js/bootstrap.bundle.js',
            'webjars/bootstrap/*/dist/css/bootstrap.css',
            'webjars/bootstrap-icons/*/font/bootstrap-icons.css',
            'webjars/bootstrap-icons/*/font/fonts/*',
    ]
}

/**
 *
 */
tasks.register('fetchUsername') {
    doLast {
        def command = ["op", "read", "op://Employee/Testing-Login/username"]
        def process = command.execute()
        def output = new StringBuffer()
        def error = new StringBuffer()

        process.waitForProcessOutput(output, error)

        if (process.exitValue() == 0) {
            println "Username: ${output.toString().trim()}"
        } else {
            println "Failed to fetch username: ${error.toString()}"
        }
    }
}


